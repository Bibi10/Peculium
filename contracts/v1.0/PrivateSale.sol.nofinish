	uint256 public constant INITIAL_PERCENT_PRIVATE_SALE = 5;
	
		uint256 public tokenAvailableForPrivateSale;
	
	//Boolean to allow or not the sale of tokens
	bool public sales_stopped = false;	
	bool public isFinalized = false;
	
		  event Finalized();
	  event Stopsale();
	  event Restartsale();
	  	  event PrivateSalesSale(address receiverToken,uint256 nbTokenSend);
	  
	  
	  
	  			tokenAvailableForPrivateSale = (amount.mul(INITIAL_PERCENT_PRIVATE_SALE)).div(100); 
	  			
	  				function sendTokensPrivateSale(address beneficiary, uint256 amountTo_Send) onlyOwner SaleNotStopped NotEmpty PrivateSale_Fund_NotEmpty
	{
	                    amount.sub(amountTo_Send);
	                    tokenAvailableForPrivateSale.sub(amountTo_Send);
	                    transfer(beneficiary,amountTo_Send);
	                    PrivateSalesSale(beneficiary,amountTo_Send);
	
	}	
			function stopSale() onlyOwner public{
      		require ( sales_stopped == false);
      		sales_stopped = true;
      		Stopsale();
	}
	
	function restartSale() onlyOwner public{
      		require ( sales_stopped == true);
      		sales_stopped = false;
      		Restartsale();
	}
	
	    modifier SaleNotStopped {
        require (!sales_stopped);
        _;
    }
    
            modifier PrivateSale_Fund_NotEmpty {
        require (tokenAvailableForPrivateSale > 0);
        _;
    }
